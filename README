-- Installation --
Just copy all the code to a directory, cd to it and run the following:

%>php run.php csv test.csv

This will import the test.csv file (which you can edit) and output it to the
screen as text.

Requires: php5.3 (for namespaces)

-- Info --
So, the code is fairly well documented. Without a deadline it would probably
be a little more verbose.

As far as extending it goes, you can see where you 
can create extra data input classes in the \Models\Data. The Csv class is
given as an example, but this could be extended to databases, rss feeds etc.

You can also extend the decorators for the import fields. The only one I've 
done uppercases and removes spaces from destination names to make it easier to
key on. Other decorators could include functionality to check for spelling
mistakes (Like: 'You typed "Iatly", did you mean "Italy"?). You could also
use the decorators to connect to 3rd party travel providers APIs to enrich
the data stored in the Transport objects.

The transport objects themselves could be extended to provide vehicle specific
properties and, I thought about this afterwards, the classes themselves could
provide the string data for outputting coherent sentences based on vehicle
types (SO, 'catch a plane (Gate45)' become 'catch your flight from Gate 45')

Finally, the output can be extended to more than just text, it could be XML,
CSV, JSON, 3rd party APIs whatever is needed.

-- Tests --
Yes, there are't any. Sorry. Usually I would mockup a few tests and write the
actual application with some injection helpers (you can see some stuff on 
http://github.com/MikePearce/Data-Reader (tests and injections)). The first 
point on the 'Things we look at list' is how I think when faced with a sharp
deadline and a complex problem.

The first thing to go in this situation were the tests. I could have done TDD, 
but the client had a deadline, so I got the code done instead. I can go back
and add tests after the fact later. Given no or a longer deadline, tests would
indeed be there. 


-- TODO --
 - If there were hundreds/thousands/millions of rows, we might run out of memory. Find some way to stream the data.